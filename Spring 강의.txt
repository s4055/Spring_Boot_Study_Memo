------------------------------------ Rest ------------------------------------
(1) Client, Server : 클라이너트와 서버가 서로 독립적으로 분리
(2) Stateless : 요청에 대해서 클라이언트의 상태를서버에 저장하지 않음
(3) Cache : 클라이언트는 서버의 응답을 Cache(임시저장) 할 수 있어야한다.
		클라이언트가 Cache를 통해서 응답을 재사용할 수 있어야 하며 이를 통해서 서버의 부하를 낮춤
(4) 계층화(Layer System) : 서버와 클라이언트 사이에 방화벽, 게이트웨이, Proxy 등 다양한 계층 형태로 구성이 가능해야하며 이를 확장할 수 있어야한다.
(5) 인터페이스 일관성 : 인터페이스의 일관성을 지키고 아키텍처를 단수화시켜 작은 단위로 분리하여 클라이언트, 서버가 독립적으로 개선 될 수 있어야함
(6) Code on Demand(Optional) : 자바 애플릿, 자바스크립트, 플래시 등 특정한 기능을 서버로 부터 클라이언트가 전달받아 코드를 실행할 수 있어야함

------------------------------------ 인터페이스의 일관성 ------------------------------------
(1) 자원의 식별
웹 기반의 REST에서는 리소스 접근을 할 때 URI를 사용
http://foo.co.kr/user/100
Resource : user
식별자 : 100

(2) 메시지를 통한 리소스 조작
Web에서는 다양한 방식으로 데이터를 전달할 수 있음 -> HTML, XML, JSON, TEXT
이 중에서 어떠한 타입의 데이터인지를 알려주기 위해서 HTTP Header부분에 context-type을 통해서 데이터의 타입을 지정해 줄 수 있음

(3) 자기서술적 메시지
요청하는 데이터가 어떻게 처리 되어져야 하는지 충분한 데이터를 포함할 수 있어야함
GET : READ
POST : CREAD
PUT : UPDATE
DELETE : DELETE

(4) Application 상태에 대한 엔진으로써 하이퍼미디어
REST API를 개발할 때 단순히 Client 요청에 대한 데이터만 응답해주는 것이 아닌 관련된 리소스에 대한 Link 정보가지 같이 포함되어져야함

------------------------------------ URI 설계 패턴 ------------------------------------
(1) URI
인터넷에서 특정 자원을 나타내는 주소값, 해당 값은 유일함

(2) URL
인터넷상에서의 자원, 특정 파일이 어디에 위치하는지 식별하는 주소

URI > URL

(1) URI 설계 원칙(RFC 3986)
- 슬래시(/) 계층 관계를 나타내는데 사용
- URI 마지막 문자로(/) 포함 X
- 하이픈(-)은 URI 가독성을 높이는데 사용
- 밑줄(_) 사용하지 않음
- URI 경로에는 소문자
- 파일 확장자는 URI에 포함하지 않음
- 프로그래밍 언어에 의존적인 확장자를 사용하지 않음
	-> EX) ~/insert.do
- 구현에 의존적인 경로를 사용하지 않음
	-> EX) ~/servlet/
- 세션ID 포함하지 않음
	-> EX) ~?session-id=abd
- 프로그래밍 언어의 Method명을 이용하지 않음
- 명사에 단수형보다는 복수형을 사용, 컬렉션에 대한 표현은 복수롤 사용
- 컨트롤러 이름으로는 동사나 동사구를 사용
- 경로 부분 중 변하는 부분은 유일한 값으로 대체
- CRUD 기능을 나타내는 것은 URI에 사용하지 않음
- URI Query Parameter 디자인, URI 쿼리 부분으로 컬렉션 결과에 대해서 필터링 할 수 있음
- URI 쿼리는 컬렉션의 결과를 페이지로 구분하여 나타내는데 사용
- API에 있어서 서브 도메인은 일관성있게 사용
- 클라이언트 개발자 포탈 서브 도메인은 일관성 있게 만듬


------------------------------------ JSON ------------------------------------
string : value
number : value
boolean : value
object : value {}
array : value []

{
	"phone_number" : "010-1111-2222",	<- string
	"age" : 20,				<- number
	"isAgree" : false,			<- boolean
	"account" : {				<- object
		"email" : "steve@gmail.com",
		"password" : "1234"
	}
}

// user 조회 하는 경우
{
	"user_list" : [				<- array
		{
			"account" : "abcd",
			"password" : "1234"		
		},
		{
			"account" : "aaaa",
			"password" : "1111"		
		},
		{
			"account" : "bbbb",
			"password" : "2222"		
		}
	]
}

------------------------------------ AOP ------------------------------------
스프링 어플리케이션은 대부분 특별한 경우를 제외하고는 MVC 웹 어플리케이션에서는 Web Layer, Business Layer, Data Layer로 정의
Web Layer : REST API를 제공, Client 중심의 로직 적용
Business Layer : 내부 정책에 따른 logic을 개발, 주로 해당 부분을 개발
Data Layer : 데이터베이스 및 외부와의 연동을 처리

특정한 함수 호출 전이나 후에 공통적인 처리가 필요한 경우에 사용 : 로깅, 트랜잭션, 인증
Advice : 실제로 적용하는 기능 (트랜잭션, 로깅 등...)

------------------------------------ Filter ------------------------------------
Web Application에서 관리되는 영역으로써 Spring Boot Framework에서 Client로 부터 오는 요청/응답에 대해서 최초/최종 단계의 위치에 존재하며
이를 통해서 요청/응답의 정보를 변경하거나 Spring에 의해서 데이터가 변환되기 전의 순수한 Client의 요청/응답 값을 확인할 수 있다.

유일하게 ServletRequest, ServletResponse의 객체를 변환할 수 있음

주로 request/response의 Logging용도로 활용하거나, 인증과 관련된 Logic들을 해당 Filter에서 처리

이를 서/후 처리 함으로써 Service business logic과 분리

------------------------------------ JUnit ------------------------------------
- TOD
테스트 주도 개발에서 사용하지만 코드의 유지보수 및 운영환경에서의 에러를 미리 방지하기 위해서 단위별로 검증하는 테스트 프레임워크

- 단위테스트
작성한 코드가 기대하는대로 동작을 하는지 검증하는 절차

- JUnit
Java기반의 단위테스트를 위한 프레임워크
Annotation 기반으로 테스트를 지원하며, Assert를 통하여 (예상, 실제)를 통해 검증

- Jacoco
Java코드의 코드 버러리지를 체크하는 라이브러리
결과를 html, xml, csv로 확인 가능

------------------------------------ 스프링 배치 ------------------------------------
- 큰 단위의 작업을 일괄 처리
- 대부분 처리량이 많고 비 실시간성 처리에 사용
	- 대용량 데이터 계산, 정산, 통계 데이터베이스, 변환등
- 컴퓨터 자원을 최대로 활용
	- 컴퓨터 자원 사용이 낮은 시간대에 배치를 처리하거나 배치만 처리하기 위해 사용자가 사용하지 않는 또 다른 컴퓨터 자원을 사용
- 사용자 상호작용으로 실되기 보단, 스케줄러와 같은 시스템에 의해 실행되는 대상
	- 예를 들면 매일 오전 10시 배치실행, 매주 월요일 12 마다 실행 : crontab, jenkins...
- 배치 처리를 하기 위한 Spring Framework 기반 기술
	- Spring에서 지원하는 기술 적용 가능
	- DI, AOP, 서비스 추상화
- 스프링 배치의 실행 단위는 Job과 Step
- 비교적 간단한 작업(Tasklet) 단위 처리와, 대량 묶음(Chunk) 단위 처리
- Job : 스프링 배치의 실행 단위
JobLauncher에 의해 실행
N개의 Step을 실행할 수 있으며 흐름(Flow)를 관리할 수 있음 : ex) A Step 실행 후 조건에 따라 B Step 또는 C Step을 실행 설정
- Step : Job의 실행 단위
- JobInstance 생성 기준
Job 이름과 JobParameter 값을 기준으로 생성 여부, 재실행, 재실행 실패가 결정
하나의 Job은 항상 하나의 같은 파리미터로 새롭게 실행 불가
ExecutionContext : Job과 Step의 Context를 관리 -> 데이터를 새로 공유 가능

스프링 배치에서 전 처리, 후처리를 하는 다양한 종류의 Listener 존재
	- interface 구현
	- @Annotation 구현
Job 실행 전과 후에 실행할 수 있는 JobExecutionListener
Step 실행 전과 후에 실행할 수 있는 StepExcutionListener -> Step에 관련된 모든 Listener는 StepListener를 상속
Skip : Step의 예외 처리 방법 중 하나
step 수행 중 발생한 특정 Exception과 에러 횟수 설정으로 예외처리 설정
	- skip(NotFounnameException.class), skipLimit(3)으로 설정된 경우
	- NotFounnameException 발생 3번까지는 에러를 skip
	- 단 에러가 발생하기 전까지 데이터는 모두 처리된 상태로 남음

step 수행 중 간헐적으로 Exception 발생 시 재시도(retry) 설정 : DB Deadlock, Network timeout 등
Async Step은 ItemProcessor와 ItemWriter 기준으로 비동기 처리
Muti-Thread Step은 chunk 단위로 멀티 스레딩 처리
Thread-Safe한 ItemReader 필수
하나의 Master 기준으로 여러 Slave Step을 생성해 Step 기준으로 Multi-Thread 처리
item이 40000개, Slave Stepdl 8개 -> 하나의 Slave Step 당 5000건씩 나눠서 




------------------------------------ Interceptor ------------------------------------
Filter와 매우 유사한 형태로 존재, 차이점은 Spring Context에 등록
AOP와 유사한 기능을 제공할 수 있으며 주로 인증 단계를 처리하거 Logginf를 하는데에 사용
이를 선/후 처리함으로써 Service bussiness logic과 분리

------------------------------------ JPA ------------------------------------
ORM : 객체와 데이터베이스 사이의 관계를 매핑
	- 어플리케이션과 데이터베이스를 연결해주는 것
	- RDBMS를 객체 지향 DB로 가상화는 것
JPA : 자바에서 ORM의 표준으로 JPA
Persistence(영속성) : 프로세스가 만든 시스템의 상태가 종료된 후에도 사라지지 않는 특성
- 구현 방법 : 시스템의 상태를 데이터 저장소에 데이터로 저장
- 사라지는 데이터 : 변수, 상수, 객체, 함수
- 사라지는 않는 데이터 : 파일, 데이터베이스
- 영속성 프레임워크 : 영속성을 관리하는 부분을 persistence layer로 추상화하고 이를 전담하는 프레임워크에게 관리를 위임
- JPA에서 persistence : 프로세스가 DB로부터 읽거나 유에 저장한 정보의 특성
JPQL : 플랫폼으로부터 독립적인 객체 지향 쿼리 언어
하이버네이트 : 실제 JPA의 구현체 클래스를 모아놓은 것
Spring Data JPA : 자주 사용하는 기술들을 다시 스프링 프레임워크에서 묶어서 정의한 것

------------------------------------ Entity ------------------------------------
@GenerationType
- TABLE : Id 값을 관리하는 테이블을 생성하여 관리
- SEQUENCE : Oracle
- IDENTITY : MySQL, Maria
- AUTO : 각 DB에 맞는 전략을 찾아서 생성

@Transient : DB에 반영하지 않고 사용하고 싶은 경우, 영속성 처리에서 제외, 해당 객체와 생명주기를 같이 사용

------------------------------------ 스프링 시큐리티 ------------------------------------
- 스프링 시큐리티가 필요한 이유
웹사이트는 각종 서비스를 하기 위한 리소스와 서비스를 사용하는 유저들의 개인 정보를 가지고 있다. 
이들 리소스를 보호하기 위해서 일반적으로 웹사이트는 두 가지 보안 정책을 설정해야한다.
1. 서버 리소스
2. 유저들의 개인 정보

- 인증 (Authentication)
사이트에 접근하는 사람이 누구인지 시스템이 알아야한다.
# UsernamePassword 인증
	1. Session 관리
	2. 토큰 관리
# SNS 로그인(소셜로그인) : 인증 위임

- 인가 혹은 권한 (Authorization)
사용자가 누구인지 알았다면 사이트 관리자 혹은 시스템은 로기인한 사용자가 어떤 일을 할 수 있는지 권한을 설정한다.
권한은 특정 페이지에 접근하거나 특정 리소스에 접근할 수 있는 권한여부를 판단하는데 사용된다.
1. Secured : deprecated
2. PrePostAuthorize
3. AOP

- 필터와 필터 사이에 Proxy(대리자)를 두어 어떤 시큐리티를 적용할지 선택
- 인증 토큰(Authentication)을 제공하는 필터들
1. UsernamePasswordAuthenticationFilter : 폼 로그인 -> UsernamePasswordAuthenticationToken
2. RememberMeAuthenticationFilter : remember-me 쿠키 로그인 -> RememberMeAuthenticationToken
3. AnonymousAuthenticationFilter : 로그인하지 않았다는 것을 인증함 -> AnonymousAuthenticationToken
4. SecurityContextPersistenceFilter : 기존 로그인을 유지함(기본적으로 session 을 이용함)
5. BearerTokenAuthenticationFilter : JWT 로그인 세션을 사용하지 않은 경우 
	토큰에 많은 정보를 담아야하기 때문에 사용
6. BasicAuthenticationFilter : ajax 로그인 -> UsernamePasswordAuthenticationToken, 
	아이디와 비밀번호를 Base64로 인코딩하여 보내주면 필터에서 로그인 인증을 하고 바로 요청하는 페이지로 보내줌 
	세션을 사용하는 경우에만 사용
	Ex) 로그인 페이지가 따로 필요없는 모바일에서 사용
7. OAuth2LoginAuthenticationFilter : 소셜 로그인 -> OAuth2LoginAuthenticationToken, OAuth2AuthenticationToken
8. OpenIDAuthenticationFilter : OpenID 로그인
9. Saml2WebSsoAuthenticationFilter : SAML2 로그인
10. ... 기타

 - JWT 토큰
서버에서 인증된 사용자가 인증을 유지해주는 방법으로 보통은 세션을 사용합니다. 서버 세션을 사용하면 인증된 사용자는 매우 편리하게 서비스를 이용할 수 있고 대부분의 웹 애플리케이션 서버가 세션을 지원하기 때문에 편리합니다.

하지만 {여러대 둘 경우(scale out), 같은 사용자가 서돌 다른 도메인의 데이터를 요청할 경우 (SSO)에는 세션을 유지하기 위한 비용이 매우 커지게 됩니다}

이 때는 서버에 사용자 정보을 저장하는 대신 클라이언트에 사용자 정보를 내려주고 서버는 토큰의 사용자 정보를 모든 요청에서 확인하고 서비스를 해주는 방식(sessionless)일 때, JWT 토큰이 유용하게 사용됩니
JWT 자바 라이브러리는 보통 auth0.com에서 만든 java-jwt 라이브러리를 쓰거나 okta에서 만든 jjwt 라이브러리를 사용합니다.

페일로드 부분에 키:값 형태로 서버가 주면 클라이언트가 가지고 있다가 요청할 때마다 서버가 토큰을 비교하여 서비스를 제공

Auth Toke을 사용하여 사용자 인증 : 만료 시간을 두어 인증 시간을 정함
자동 로그인을 위해 Refresh Token을 사용 : 클라이언트가 가지고 있기 때문에 보안을 생각한다면 서버에서 DB로 관리가 필요함

- JWT 어떤 내용을 넣어야 할까?
일반적으로는 인증에 필요한 최소한의 데이터를 넣음
비밀번호나 전화번호등을 넣는 것은 안전하지 않음
이 토큰은 언제든 공개할 수 있는 정보를 넣는 것이 좋음
서버에서 인증된 키가 아니라도 언제든 서버는 이 토큰을 열어서 그 안에 어떤 Claim이 있는지 볼 수 있음

- JWT 토큰을 어떻게 관리할 것인가?
이론적으로 토큰을 클라이언트가 관리
하지만 실제로 서버는 사용자 정보 캐싱이나 토큰의 유효성 평가, 혹은 refresh토큰 정책을 위해 서버에 토큰을 관리하기도 함
이 경우, 토큰과 사용자 정보를 관리하는 방법으로 {(redis, hazelcast), DB 저장}을 사용
# redis, hazelcast : 사용자의 정보를 매번 DB에서 가져오는 것이 힘들기 때문에 사용자의 정보를 가지고 있게 하여 세션처럼 사용, 여러대의 서버에 올려서 사용할 수 있는 장점이 있음

------------------------------------ IoC, DI ------------------------------------
- IoC(Inversion of Control), DI(Dependency Injection)
- 스프링에서의 Bean
스프링 IoC 컨테이너에 의해 성성되고 관리되는 객체
쉽게 꺼내서 사용할 수 있는 Getter/Setter로 이루어진 클래스

------------------------------------ SpEL(Spring Expression language) ------------------------------------
짧고 간단한 문법을 통해 필요한 데이터나 설정 값을 얻어올 수 있게 하는 특별한 형태의 표현식에 가까운 간편한 언어
Ex) @Value("${config.value}")와 같은 방식으로 설정값을 주입받아 사용

------------------------------------ @Component ------------------------------------
"이 클래스는 커스텀 빈이다." : 클래스 빈 등록
1. @ComponentScan -. base package 에서부터 모든 @Component 검색
2. 인스턴스화 : 필요한 의존성을 모두 주입
3. 스프링 컨테이너에 등록 : 필요한 곳에 주입
라이트 모드이며 프록시 빈이 아니기 때문에 N번 호출한다면 N번 인스턴스 생성
Class-level annotation
등록하려는 빈의 클래스 소스가 편집 가능한 경우 사요
auto-detection에 걸림

------------------------------------ @Bean ------------------------------------
method-level annotation
좀 더 읽기 쉬움
인스턴스화 하는 코드가 수동으로 작성됨
빈의 인스턴스 코드와 클래스 정의가 분리된 구조
따라서 외부 라이브러리, 써드 파티 클래스도 빈으로 등록 가능

------------------------------------ @@Configuratoin ------------------------------------
"이 클래스는 각종 빈 설정을 담고 있다." : 빈 설정
@SpringBootApplication이 컴포넌트 스캔을 통해 @Configuratoin을 찾아냄
안의 빈 설정(메소드)을 읽어서 스프링 컨테이너에 등록
필요한 곳에 주입
또는 각종 스프링 인터페이스의 구현에 함께 활용

------------------------------------ @@Service ------------------------------------
비즈니스 로직을 담다아흔 컴포넌트
도메인 모델(데이터)과 컨트롤러 사이에 위치
클래스 네이밍을 반드시 -Serviceㄹ 할 필요 없음 -> 하지망 관례적으로 실무에서 즐겨 사용되는 네이미
구현 방식
1. 인터페이스 = 클래스 : 정석
인터페이스를 요구사항에 따른 기능 문서로 작성
같은 기능을 하는 다양한 구현체를 작성할 니즈가 예상될 때 적합
2. 클래스
실무에서 즐겨사용되기도 하는 방식
인터페이스를 추가로 작성하는 수고를 덜게됨
아무래도 컨트롤러 레이어와 결합도는 좀 더 증가하게 됨

------------------------------------ DataSource ------------------------------------
물리적인 데이터소스(데이터베이스) 정보를 담는 인터페이스
하나의 물리 데이터베이스를 표현
다양한 구현체를 사용

------------------------------------ TransactionManager ------------------------------------
스프링 트랜잭션 관리 기능을 담당하는 인터페이스

------------------------------------ JPA DB 수동 ------------------------------------
DataSource (DB 설정) -> EntityManagerFactory (JPA 엔티티 관리) -> PlatformTransactionManager (트랜잭션 관리)

------------------------------------ @Transactional ------------------------------------
스프링이 어노테이션 기반 트랜잭션 관리 기능을 제공
 
------------------------------------ UsernamePasswordAuthenticationFiler ------------------------------------
Form 데이터로 username, password 기반의 인증을 담당하고 있는 필터
UsernamePasswordAuthenticationFilter : username, password 인증 필터)
ProviderManager(AuthenticationManager) : 인증 정보 제공 관리자
AbstractUsreDetailsAuthenticationProvider : 인증 정보 제공 (계정의 상태나 패스워드 일치 여부등을 파악)
DaoAuthenticationProvider : 유저 정보 제공
UserDetailsService : 유저 정보 제공하는 Service

------------------------------------ 토큰 ------------------------------------
세션의 단점을 해결하기 위해서 토큰으로 인증하는 방법을 사용할 수 있습니다.
유저가 로그인을 하면 서버에서는 토큰을 생성한 뒤에 저장하지 않고 (stateless)토큰값을 내려줍니다.
이 토큰 값을 유저가 게시글 조회 요청을 할 때 함꼐 보내고 서버2(서버1이여도 상관없음)에서 이 토큰을 의미 있는 값으로 해석합니다.
그리고 그 값을 토대로 유저를 인증합니다.
세션방식에서의 JSESSIONID은 key로만 활용될 수 있는 의미없는 값이 들어있습니다.
그러나 토큰은 유저를 설명할 수 있는 데이터를(ex : username) 포함합니다.

# 장점
- 세션관리를 할 필요가 없어 별도의 저장소가 필요하지 않습니다.
- 서버 분산&클러스터 환경과 같은 확장성에 좋습니다.

# 단점
- 한 번 제공된 토큰은 회수가 어렵습니다.
세션의 경우에는 서버에서 세션을 삭제해버리면 브라우저의 JSESSIONID는 무용지물이 되어버립니다.
그러나 토큰은 세션을 저장하지 않기 때문에 합번 제공된 토큰을 회수할 수 없습니다.
그래서 보토 토큰의 유효기간을 짧게 합니다.
- 토큰에는 유저의 정보가 있기 때문에 상대적으로 안정성이 우려됩니다.
따라서 민감정보를 토큰에 포함시키면 안됩니다.(아이디, 비밀번호 등...)

------------------------------------ JWT ------------------------------------  
# JWT : Json Web Token
# 구조 : HEADER.PAYLOAD.SIGNATURE
- HEADER
JWT를 검증하는 데 필요한 정보를 가진 객체
Signature에 사용한 암호화 알고리즘이 무엇인지, Key의 ID가 무엇인지 정보를 담고 있음
이 정보를 Json으로 변환하여 UTF-8로 인코딩한 뒤 Base64 URL-Safe로 인코딩한 값이 들어감
결과값이 난해한 문자로 보이지만 암화된 값은 아님

- PAYLOAD
실질적으로 인증에 필요한 데이터를 저장
데이터의 각각 필들을 Claim
대부분의 경우에 Claim에 username을 포함
인증할 때 payload에 있는 username을 가져와서 유저 정보를 조회할 때 사용해야하기 때문
토큰 발행시간(iat)와 토큰 만료시간(exp)를 포함
그 외에도 원하는 Claim을 얼마든지 추가할 수 있지만 민감정보는 포함시켜서는 안됨
Payload 역시 Header와 마찬가지로 암호화되지 않음
Json으로 바꾼 뒤 UTF-8로 인코딩하고 Base64로 변경한 데이터

- Signature
Header, Payload 암호화하지 않고 json -> UTF-8 -> base64로 변환한 데이터
토큰 자체의 진위여부를 판단하는 용도로 사용
Header + Payload -> 비밀키로 Hash를 생성하여 암호화
Header + Payload -> SecretKey로 Hashing하고 Base64로 변경

- Key Rolling
JWT의 토큰 생성 메커니즘을 보다보면 Secret Key가 노출되면 사실상 모든 데이터가 유출될 수 있다는 걸 알수 있습니다.
이런 문제를 방지하기 위해서 Secret Key를 여러개 두고 Key 노출에 대비할 수 있습니다.
Secret Key를 여러개를 사용하고 수시로 추가하고 삭제해줘서 변경한다면
SecretKey 중에 1개가 노출되어도 다른 Secret Key와 데이터는 안전한 상태가 됩니다.
이걸 바로 Key Rolling이라고 합니다. (Key Rolling이 필수는 아닙니다)
Key Rolling에서는 여러개의 Secret Key가 존재합니다.
Secret Key 1개에 Unique한 ID (kid 혹은 key id라고 부름) 를 연결시켜 둡니다.
JWT 토큰을 만들 때 헤더에 kid를 포함하여 제공하고 서버에서 토큰을 해석할 때 kid로 Secret Key를 찾아서 Signature를 검증합니다






