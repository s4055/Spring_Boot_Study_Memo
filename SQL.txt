--------------------------------- 그룹 제어 ---------------------------------
SELECT [GROUP BY에서 사용된 컬럼명들, 집계함수]
FROM [테이블명]
WHERE [조건들]
GROUP BY [컬럼명들(, 로 구분)] 
HAVING [GROUP BY절에 해당하는 조건들(, 로 구분)]
WHERE절을 만족하는 데이터들에 대해서 그룹바이를 하여 그룹화를 하고 해당 그룹에 대해 HAVING절의 조건을 만족하는 데이터 추출

--------------------------------- 집합 연산 ---------------------------------
SELECT [컬럼1], [컬럼2], [컬럼3]...
FROM [테이블명1]
UNION
SELECT [컬럼1], [컬럼2], [컬럼3]...
FROM [테이블명2]

SELECT [컬럼1], [컬럼2], [컬럼3]...
FROM [테이블명1]
UNION ALL
SELECT [컬럼1], [컬럼2], [컬럼3]...
FROM [테이블명2]

2개의 SELECT 쿼리 결과를 하나로 합칠 때 사용
SELECT 절의 컬럼의 순서가 같아야하며 데이터 타입도 호환되어야함
UNION : 중복 결과를 제외하고 추출
UNION ALL : 중복 결과도 포함하여 추출

--------------------------------- 순위 집계 ---------------------------------
SELECT RANK() OVER(PARTITION BY [그룹할 컬럼들] ORDER BY [순위를 매길 때 사용할 컬럼들]) FROM [테이블명]
1등(100), 2등(90), 3등(85), 3등(85), 3등(85), 6등(70), 7등(50)...

SELECT DENSE_RANK() OVER(PARTITION BY [그룹할 컬럼들] ORDER BY [순위를 매길 때 사용할 컬럼들]) FROM [테이블명]
1등(100), 2등(90), 3등(85), 3등(85), 3등(85), 4등(70), 5등(50)...

SELECT ROW_RANK() OVER(PARTITION BY [그룹할 컬럼들] ORDER BY [순위를 매길 때 사용할 컬럼들]) FROM [테이블명]
1등(100), 2등(90), 3등(85), 4등(85), 5등(85), 6등(70), 7등(50)...

--------------------------------- 조인 ---------------------------------
INNER JOIN : 값이 존재하는 것들만 조인
SELECT * FROM [테이블1] AS A INNER JOIN [테이블2] AS B ON A.KEY = B.KEY

OUTER JOIN
LEFT : SELECT * FROM [테이블1] AS A LEFT OUTER JOIN [테이블2] AS B ON A.KEY = B.KEY
  - 오른쪽 테이블2의 키값이 없다면 NULL로 결합
RIGHT : SELECT * FROM [테이블1] AS A RIGHT OUTER JOIN [테이블2] AS B ON A.KEY = B.KEY
  - 왼쪽 : 테이블1의 키값이 없다면 NULL로 결합






